rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is a participant in the conversation
    function isParticipant(conversationId) {
      let conversation = get(/databases/$(database)/documents/conversations/$(conversationId));
      return isAuthenticated() && (
        !exists(/databases/$(database)/documents/conversations/$(conversationId)) ||
        conversation.data.participants.hasAny([request.auth.uid])
      );
    }

    // Conversations collection
    match /conversations/{conversationId} {
      // Allow creating if user is authenticated
      allow create: if isAuthenticated();

      // Allow reading if user is authenticated
      allow read: if isAuthenticated();

      // Allow updating if user is authenticated
      allow update: if isAuthenticated();

      // Messages subcollection
      match /messages/{messageId} {
        allow create: if isAuthenticated();
        allow read: if isAuthenticated();
        allow update: if isAuthenticated();
      }
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && request.auth.uid == userId;
    }

    // Listings collection
    match /listings/{listingId} {
      allow read: if true;
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() &&
                             (
                               // Allow if user is the owner
                               resource.data.userId == request.auth.uid ||
                               // Or if updating specific fields like likes
                               request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes', 'sold', 'soldTo', 'soldAt'])
                             );
    }
  }
}
